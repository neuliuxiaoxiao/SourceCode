插入：
Part I：找到目标节点的位置并插入
（1）这里的目标节点是数据节点，也就是最底层的那条链；
（2）寻找目标节点之前最近的一个索引对应的数据节点（数据节点都是在最底层的链表上）；
（3）从这个数据节点开始往后遍历，直到找到目标节点应该插入的位置；
（4）如果这个位置有元素，就更新其值（onlyIfAbsent=false）；
（5）如果这个位置没有元素，就把目标节点插入；
（6）至此，目标节点已经插入到最底层的数据节点链表中了；
Part II：随机决定是否需要建立索引及其层次，如果需要则建立自上而下的索引
（1）取个随机数rnd，计算(rnd & 0x80000001)；
（2）如果不等于0，结束插入过程，也就是不需要创建索引，返回；
（3）如果等于0，才进入创建索引的过程（只要正偶数才会等于0）；
（4）计算while (((rnd >>>= 1) & 1) != 0)，决定层级数，level从1开始；
（5）如果算出来的层级不高于现有最高层级，则直接建立一条竖直的索引链表（只有down有值），并结束Part II；
（6）如果算出来的层级高于现有最高层级，则新的层级只能比现有最高层级多1；
（7）同样建立一条竖直的索引链表（只有down有值）；
（8）将头索引也向上增加到相应的高度，结束Part II；
（9）也就是说，如果层级不超过现有高度，只建立一条索引链，否则还要额外增加头索引链的高度（脑补一下，后面举例说明）；
Part III：将新建的索引节点（包含头索引节点）与其它索引节点通过右指针连接在一起（补上right指针）
（1）从最高层级的头索引节点开始，向右遍历，找到目标索引节点的位置；
（2）如果当前层有目标索引，则把目标索引插入到这个位置，并把目标索引前一个索引向下移一个层级；
（3）如果当前层没有目标索引，则把目标索引位置前一个索引向下移一个层级；
（4）同样地，再向右遍历，寻找新的层级中目标索引的位置，回到第（2）步；
（5）依次循环找到所有层级目标索引的位置并把它们插入到横向的索引链表中；
总结起来，一共就是三大步：
（1）插入目标节点到数据节点链表中；
（2）建立竖直的down链表；
（3）建立横向的right链表；


删除：
（1）寻找目标节点之前最近的一个索引对应的数据节点（数据节点都是在最底层的链表上）；
（2）从这个数据节点开始往后遍历，直到找到目标节点的位置；
（3）如果这个位置没有元素，直接返回null，表示没有要删除的元素；
（4）如果这个位置有元素，先通过n.casValue(v, null)原子更新把其value设置为null；
（5）通过n.appendMarker(f)在当前元素后面添加一个marker元素标记当前元素是要删除的元素；
（6）通过b.casNext(n, f)尝试删除元素；
（7）如果上面两步中的任意一步失败了都通过findNode(key)中的n.helpDelete(b, f)再去不断尝试删除；
（8）如果上面两步都成功了，再通过findPredecessor(key, cmp)中的q.unlink(r)删除索引节点；
（9）如果head的right指针指向了null，则跳表高度降级；
234保证多线程下操作的正确性

查找元素：
（1）寻找目标节点之前最近的一个索引对应的数据节点（数据节点都是在最底层的链表上）；
（2）从这个数据节点开始往后遍历，直到找到目标节点的位置；
（3）如果这个位置没有元素，直接返回null，表示没有找到元素；
（4）如果这个位置有元素，返回元素的value值；
