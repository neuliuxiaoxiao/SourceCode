（1）ArrayList和LinkedList有什么区别？
 
（2）ArrayList是怎么扩容的？
 答：每次扩容一半，不会进行缩容

（3）ArrayList插入、删除、查询元素的时间复杂度各是多少？
 答：尾部插入、删除 O(1) 索引插入、删除O(n);索引查询O(1) 

（4）怎么求两个集合的并集、交集、差集？
 答:并集：addAll(Collection<? extends E> c) 交集：retainAll(Collection<? extends E> c) 差集：removeAll(Collection<? extends E> c)

（5）ArrayList是怎么实现序列化和反序列化的？
 答:在ArrayList的writeObject()方法中先调用了s.defaultWriteObject()方法，这个方法是写入非static非transient的属性，在ArrayList中也就是size属性。同样地，在readObject()方法中先调用了s.defaultReadObject()方法解析出了size属性;elementData定义为transient的优势，自己根据size序列化真实的元素，而不是根据数组的长度序列化元素，减少了空间占用

（6）集合的方法toArray()有什么问题？
 答:返回的有可能不是Object[]类型 jdk的一个bug

（7）什么是fail-fast？
 答：用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception
 原理：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。
 注意：这里异常的抛出条件是检测到 modCount！=expectedmodCount 这个条件。如果集合发生变化时修改modCount值刚好又设置为了expectedmodCount值，则异常不会抛出。因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的bug。

（8）LinkedList是单链表还是双链表实现的？
 答：双向链表

（9）LinkedList除了作为List还有什么用处？
 答：双端队列，具有队列、双端队列、栈的特性

（10）LinkedList插入、删除、查询元素的时间复杂度各是多少？
 答：队列首尾添加、删除元素非常高效，时间复杂度为O(1)；中间添加、删除元素比较低效，时间复杂度为O(n)

（11）什么是随机访问？
 答：给定索引，时间复杂度为O(1)的访问

（12）哪些集合支持随机访问？他们都有哪些共性？
 答：ArrayList，CopyOnWriteArrayList；底层用数组实现

（13）CopyOnWriteArrayList是怎么保证并发安全的？
 答:使用ReentrantLock重入锁加锁，保证线程安全

（14）CopyOnWriteArrayList的实现采用了什么思想？
 答:采用读写分离的思想，读操作不加锁，写操作加锁，且写操作占用较大内存空间，

（15）CopyOnWriteArrayList是不是强一致性的？
 答:只保证最终一致性，不保证实时一致性；因为是写操作是复制一个新数组出来

（16）CopyOnWriteArrayList适用于什么样的场景？
 答:读多写少的场合

（17）CopyOnWriteArrayList插入、删除、查询元素的时间复杂度各是多少？
 答：尾部插入、删除 O(1) 索引插入、删除O(n);索引查询O(1) 

（18）CopyOnWriteArrayList为什么没有size属性？
 答:因为每次修改都是拷贝一份正好可以存储目标个数元素的数组，所以不需要size属性了，数组的长度就是集合的大小，而不像ArrayList数组的长度实际是要大于集合的大小的

（19）比较古老的集合Vector和Stack有什么缺陷？

========================================================================================================================================================
（1）什么是散列表？

（2）怎么实现一个散列表？
  答：设计一个合适的散列函数；
      定义装载因子阈值，并且设计动态扩容策略；
      选择合适的散列冲突解决方法。

（3）java中HashMap实现方式的演进？
 答:数组+链表-->数组+链表+红黑树

（4）HashMap的容量有什么特点？
 答：初始容量为64，总是2的n次方

（5）HashMap是怎么进行扩容的？
 答：1如果使用是默认构造方法，则第一次插入元素时初始化为默认值，容量为16，扩容门槛为12；
    2如果使用的是非默认构造方法，则第一次插入元素时初始化容量等于扩容门槛，扩容门槛在构造方法里等于传入容量向上最近的2的n次方；
    3如果旧容量大于0，则新容量等于旧容量的2倍，但不超过最大容量2的30次方，新扩容门槛为旧扩容门槛的2倍；
    4创建一个新容量的桶；
    5搬移元素，原链表分化成两个链表，低位链表存储在原来桶的位置，高位链表搬移到原来桶的位置加旧容量的位置；

（6）HashMap中的元素是否是有序的？
 答:无序的

（7）HashMap何时进行树化？何时进行反树化？
 答:当桶的数量大于64且单个桶中元素的数量大于8时，进行树化;当单个桶中元素数量小于6时，进行反树化

（8）HashMap是怎么进行缩容的？
 答：没有缩容

（9）HashMap插入、删除、查询元素的时间复杂度各是多少？
 答:插入、查询O(1) 删除O(1)

（10）HashMap中的红黑树实现部分可以用其它数据结构代替吗？
 答：目前没想到

（11）LinkedHashMap是怎么实现的？
 答:在内部维护了一个双向链表，能够保证元素按照插入的顺序访问，可以看成是 LinkedList + HashMap

（12）LinkedHashMap是有序的吗？怎么个有序法？
 答：有序，accessOrder为false，按照插入顺序存储元素；为true则按照访问顺序存储元素

（13）LinkedHashMap如何实现LRU缓存淘汰策略？
 答：默认的LinkedHashMap并不会移除旧元素，如果需要移除旧元素，则需要重写removeEldestEntry()方法设定移除策略（预留的Hook，不需要重写），

（14）WeakHashMap使用的数据结构？
 答：数组 + 链表

（15）WeakHashMap具有什么特性？
 答:弱引用map，不具有克隆和序列化的特性，所有对map的操作都会直接或间接地调用到这个方法先移除失效的Entry，比如getTable()、size()、resize()

（16）WeakHashMap通常用来做什么？
  答：WeakHashMap特别适用于缓存处理,内部的key会存储为弱引用，当jvm gc的时候，如果这些key没有强引用存在的话，会被gc回收掉，下一次当我们操作map的时候会把对应的Entry整个删除掉，

（17）WeakHashMap使用String作为key是需要注意些什么？为什么？
 答：通过new String()声明的变量才是弱引用，使用”6″这种声明方式会一直存在于常量池中，不会被清理，所以”6″这个元素会一直在map里面，其它的元素随着gc都会被清理掉

（18）什么是弱引用？
 答：如果一个对象只具有弱引用，则不管内存空间够不够，当gc扫描到它时就会回收它。

（19）红黑树具有哪些特性？
 答：节点是红色或黑色；根节点是黑色；每个叶节点（NIL节点，空节点）是黑色的；每个红色节点的两个子节点都是黑色；从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点

（20）TreeMap就有序的吗？怎么个有序法？
 答：有序，按key值的大小进行遍历

（21）TreeMap是否需要扩容？
 答：不需要，树结构

（22）什么是左旋？什么是右旋？
 答：A       左旋    C       
  B    C          A    E
      D E       B  D
  左旋是对A左旋；右旋就是反过来  对C右旋

（23）红黑树怎么插入元素？
 答：如果元素在树中存在，则替换value；如果元素不存在，则插入到对应的位置，再平衡树；插入的元素默认都是红色

（24）红黑树怎么删除元素？
 答：（1）如果删除的位置有两个叶子节点，则从其右子树中取最小的元素放到删除的位置，然后把删除位置移到替代元素的位置，进入下一步。
    （2）如果删除的位置只有一个叶子节点（有可能是经过第一步转换后的删除位置），则把那个叶子节点作为替代元素，放到删除的位置，然后把这个叶子节点删除。
    （3）如果删除的位置没有叶子节点，则直接把这个删除位置的元素删除即可。
    （4）针对红黑树，如果删除位置是黑色节点，还需要做再平衡。
    （5）如果有替代元素，则以替代元素作为当前节点进入再平衡。
    （6）如果没有替代元素，则以删除的位置的元素作为当前节点进入再平衡，平衡之后再删除这个节点。

（25）为什么要进行平衡？
 答：为了查找的性能

（26）如何实现红黑树的遍历？
 答：前序遍历、中序遍历、后序遍历；经典的便利走迭代

（27）TreeMap中是怎么遍历的？
 答：1寻找第一个节点；2循环遍历后继节点

（28）TreeMap插入、删除、查询元素的时间复杂度各是多少？
 答：O(logn)

（29）HashMap在多线程环境中什么时候会出现问题？
  答：线程不安全

（30）ConcurrentHashMap的存储结构？
 答：数组 + 链表 + 红黑树

（31）ConcurrentHashMap是怎么保证并发安全的？
 答：采用的锁有 synchronized，CAS，自旋锁，分段锁，volatile等

（32）ConcurrentHashMap是怎么扩容的？
 答：扩容或协助扩容；整个扩容过程都是通过CAS控制sizeCtl这个字段来进行的
    （1）新桶数组大小是旧桶数组的两倍；
    （2）迁移元素先从靠后的桶开始；
    （3）迁移完成的桶在里面放置一ForwardingNode类型的元素，标记该桶迁移完成；
    （4）迁移时根据hash&n是否等于0把桶中元素分化成两个链表或树；
    （5）低位链表（树）存储在原来的位置；
    （6）高们链表（树）存储在原来的位置加n的位置；
    （7）迁移元素时会锁住当前桶，也是分段锁的思想

（33）ConcurrentHashMap的size()方法的实现知多少？
 答：元素个数的存储也是采用分段的思想，获取元素个数时需要把所有段加起来

（34）ConcurrentHashMap是强一致性的吗？
 答：不是，查询操作不会加锁

（35）ConcurrentHashMap不能解决什么问题？
 答：ConcurrentHashMap中不能存储key或value为null的元素
 public void unsafeUpdate(Integer key, Integer value) {
    Integer oldValue = map.get(key);
    if (oldValue == null) {
        map.put(key, value);
    }}
 因为get()之后if之前可能有其它线程已经put()了这个元素，这时候再put()就把那个线程put()的元素覆盖了

（36）ConcurrentHashMap中哪些地方运用到分段锁的思想？
 答：添加(如果待插入的元素所在的桶不为空且不在迁移元素)，迁移元素时会锁住当前桶，也是分段锁的思想；删除(先找到元素所在的桶)；更新(锁住当前桶的第一个元素)

（37）什么是伪共享？怎么避免伪共享？

（38）什么是跳表？
 答：一个随机化的数据结构，实质就是一种可以进行二分查找的有序链表；跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找

（40）ConcurrentSkipList是有序的吗？
 答：是

（41）ConcurrentSkipList是如何保证线程安全的？
 答：采用无锁并发方式;;基于final、volatile、CAS方式助于并发;删除Node节点方式：将该节点的value置为null，且在其后插入一个删除标记节点

（42）ConcurrentSkipList插入、删除、查询元素的时间复杂度各是多少？
 答：O(log n)

（43）ConcurrentSkipList的索引具有什么特性？
 答：每个元素插入时随机生成它的level

（44）为什么Redis选择使用跳表而不是红黑树来实现有序集合？
 答：1插入元素、2删除元素、3查找元素、4有序输出所有元素、5查找区间内所有元素 前四项红黑树可以实现，但是第五项效率没有跳表高；此外跳表实现起来比红黑树简单

 ===========================================================================================================================================
（1）HashSet怎么保证添加元素不重复？
 答：HashSet内部使用HashMap的key存储元素，以此来保证元素不重复

（2）HashSet是有序的吗？
 答：无序

（3）HashSet是否允许null元素？
 答：HashSet中允许有一个null元素，因为HashMap允许key为null

（4）Set是否有get()方法？
 答：没有

（5）LinkedHashSet是有序的吗？怎么个有序法？
 答：LinkedHashSet的底层使用LinkedHashMap存储元素，LinkedHashSet是有序的，它是按照插入的顺序排序的

（6）LinkedHashSet支持按元素访问顺序排序吗？
 答：不支持，直接把LinkedHashMap中的accessOrder写死为false

（8）TreeSet真的是使用TreeMap来存储元素的吗？
 答：不完全是，元素存储在NavigableMap

（9）TreeSet是有序的吗？怎么个有序法？
 答：是，按照key的自然排序

（10）TreeSet和LinkedHashSet有何不同？
 答：LinkedHashSet并没有实现SortedSet接口，它的有序性主要依赖于LinkedHashMap的有序性，所以它的有序性是指按照插入顺序保证的有序性；
     而TreeSet实现了SortedSet接口，它的有序性主要依赖于NavigableMap的有序性，而NavigableMap又继承自SortedMap，这个接口的有序性是指按照key的自然排序保证的有序性，而key的自然排序又有两种实现方式，一种是key实现Comparable接口，一种是构造方法传入Comparator比较器。

（11）TreeSet和SortedSet有什么区别和联系？
 答：TreeSet实现了SortedSet接口

（12）CopyOnWriteArraySet是用Map实现的吗？
 答：底层是使用CopyOnWriteArrayList存储元素的，所以它并不是使用Map来存储元素的

（13）CopyOnWriteArraySet是有序的吗？怎么个有序法？
 答：是有序的，数组有序

（14）CopyOnWriteArraySet怎么保证并发安全？
 答：读写分离

（15）CopyOnWriteArraySet以何种方式保证元素不重复？
 答：CopyOnWriteArrayList的addIfAbsent()方法来保证元素不重复(加锁)

（16）如何比较两个Set中的元素是否完全一致？
 答：先比较两个Set的元素个数是否相等，再作一次两层循环就可以了

（17）ConcurrentSkipListSet的底层是ConcurrentSkipListMap吗？
 答：是ConcurrentNavigableMap；但是基本上都是使用ConcurrentSkipListMap实现

（18）ConcurrentSkipListSet是有序的吗？怎么个有序法？
 答：有序的，基于元素的自然排序或者通过比较器确定的顺序

Set                     有序性         线程安全        底层实现                关键接口         特点
HashSet                 无             否             HashMap                 无              简单
LinkedHashSet           有             否             LinkedHashMap           无              插入顺序
TreeSet                 有             否             NavigableMap            NavigableSet    自然顺序
CopyOnWriteArraySet     有             是             CopyOnWriteArrayList    无               插入顺序，读写分离
ConcurrentSkipListSet   有             是             ConcurrentNavigableMap  NavigableSet    自然顺序
 
================================================================================================================================================

（1）什么是堆？什么是堆化？
 答：堆是一种特殊的树，只要满足下面两个条件，它就是一个堆：（1）堆是一颗完全二叉树；（2）堆中某个节点的值总是不大于（或不小于）其父节点的值。

（2）什么是优先级队列？
 答：是0个或多个元素的集合，集合中的每个元素都有一个权重值，每次出队都弹出优先级最大或最小的元素

（3）PriorityQueue是怎么实现的？
 答：小顶堆实现，数组存储数据

（4）PriorityQueue是有序的吗？
 答：不是，只是堆顶存储着最小的元素

（5）PriorityQueue入队、出队的时间复杂度各是多少？
 答：O(log(n))

（6）PriorityQueue是否需要扩容？扩容规则呢？
 答：需要，1当数组比较小（小于64）的时候每次扩容容量翻倍；2当数组比较大的时候每次扩容只增加一半的容量；

（7）ArrayBlockingQueue的实现方式？
 答：以数组实现的阻塞队列，线程安全

（8）ArrayBlockingQueue是否需要扩容？
 答：不需要扩容，因为是初始化时指定容量，并循环利用数组

（9）ArrayBlockingQueue怎么保证线程安全？
 答：利用重入锁和两个条件保证并发安全，利用takeIndex和putIndex循环利用数组

（9）ArrayBlockingQueue有什么缺点？
 答：1队列长度固定且必须在初始化时指定，所以使用之前一定要慎重考虑好容量；
     2如果消费速度跟不上入队速度，则会导致提供者线程一直阻塞，且越阻塞越多，非常危险；
     3只使用了一个锁来控制入队出队，效率较低

（10）LinkedBlockingQueue的实现方式？
 答：以单链表实现的阻塞队列，它是线程安全的

（11）LinkedBlockingQueue是有界的还是无界的队列？
 答：有界队列，不传入容量时默认为最大int值

（12）LinkedBlockingQueue怎么保证线程安全？
 答：用两把锁的锁分离技术实现入队出队互不阻塞

（13）LinkedBlockingQueue与ArrayBlockingQueue对比？
 答：1后者入队出队采用一把锁，导致入队出队相互阻塞，效率低下；
    2前者入队出队采用两把锁，入队出队互不干扰，效率较高；
    3二者都是有界队列，如果长度相等且出队速度跟不上入队速度，都会导致大量线程阻塞；
    4前者如果初始化不传入初始容量，则使用最大int值，如果出队速度跟不上入队速度，会导致队列特别长，占用大量内存

（14）SynchronousQueue的实现方式？
 答：一种是公平（队列）方式，一种是非公平（栈）方式

（15）SynchronousQueue真的是无缓冲的吗？
 答：其实SynchronousQueue内部或者使用栈或者使用队列来存储包含线程和元素值的节点，如果同一个模式的节点过多的话，它们都会存储进来，且都会阻塞着，所以，严格上来说，SynchronousQueue并不能算是一个无缓冲队列

（16）SynchronousQueue怎么保证线程安全？
 答：自旋+CAS

（17）SynchronousQueue的公平模式和非公平模式有什么区别？
 答：栈和队列的区别

（18）SynchronousQueue在高并发情景下会有什么问题？
 答：如果生产者消费者二者速度不对等，会导致一端过多线程处于阻塞

（19）PriorityBlockingQueue的实现方式？
 答：使用数组来存储元素

（20）PriorityBlockingQueue是否需要扩容？
 答：使用一个单独变量的CAS操作来控制只有一个线程进行扩容

（21）PriorityBlockingQueue怎么保证线程安全？
 答：使用一个锁加一个notEmpty条件来保证并发安全

（22）PriorityBlockingQueue为什么不需要notFull条件？
 答：因为PriorityBlockingQueue在入队的时候如果没有空间了是会自动扩容的，也就不存在队列满了的状态，也就是不需要等待通知队列不满了可以放元素了，所以也就不需要notFull条件了。

（23）什么是双重队列？
 答：放取元素使用同一个队列，队列中的节点具有两种模式，一种是数据节点，一种是非数据节点。
    放元素时先跟队列头节点对比，如果头节点是非数据节点，就让他们匹配，如果头节点是数据节点，就生成一个数据节点放在队列尾端（入队）。
    取元素时也是先跟队列头节点对比，如果头节点是数据节点，就让他们匹配，如果头节点是非数据节点，就生成一个非数据节点放在队列尾端（入队）。

（24）LinkedTransferQueue是怎么实现阻塞队列的？
 答：入队之后，先自旋一定次数后再调用LockSupport.park()或LockSupport.parkNanos阻塞

（25）LinkedTransferQueue是怎么控制并发安全的？
 答：自旋+CAS 实现

（26）LinkedTransferQueue与SynchronousQueue有什么异同？
  答：1在java8中两者的实现方式基本一致，都是使用的双重队列；
      2前者完全实现了后者，但比后者更灵活；
      3后者不管放元素还是取元素，如果没有可匹配的元素，所在的线程都会阻塞；
      4前者可以自己控制放元素是否需要阻塞线程，比如使用四个添加元素的方法就不会阻塞线程，只入队元素，使用transfer()会阻塞线程；
      5取元素两者基本一样，都会阻塞等待有新的元素进入被匹配到；

（27）ConcurrentLinkedQueue是阻塞队列吗？
 答：不是

（28）ConcurrentLinkedQueue如何保证并发安全？
 答：CAS+自旋

（29）ConcurrentLinkedQueue能用于线程池吗？
 答：不能

（30）DelayQueue是阻塞队列吗？
 答：是

（31）DelayQueue的实现方式？
 答：优先级队列，辅以重入锁和条件来控制并发安全

（32）DelayQueue主要用于什么场景？
 答：常用于定时任务

 (33) java中的线程池实现定时任务是直接用的DelayQueue吗?
 答：当然不是，ScheduledThreadPoolExecutor中使用的是它自己定义的内部类DelayedWorkQueue，其实里面的实现逻辑基本都是一样的，只不过DelayedWorkQueue里面没有使用现在的PriorityQueue，而是使用数组又实现了    一遍优先级队列，本质上没有什么区别

==============================================================================================================================================
（1）什么是双端队列？
 答：特殊的队列，它的两端都可以进出元素

（2）ArrayDeque是怎么实现双端队列的？
 答：以数组方式实现的双端队列，它是非线程安全的

（3）ArrayDeque是有界的吗？
 答：有界

（4）LinkedList与ArrayDeque的对比？

（5）双端队列是否可以作为栈使用？
 答：可以，ArrayDeque可以用做栈

（6）LinkedBlockingDeque是怎么实现双端队列的？
 答：基于链表的双端阻塞队列，可选容量的阻塞队列，如果没有设置容量，那么容量将是Int的最大值

（7）LinkedBlockingDeque是怎么保证并发安全的？
 答：一把锁+两个条件

（8）ConcurrentLinkedDeque是怎么实现双端队列的？
 答：   

（9）ConcurrentLinkedDeque是怎么保证并发安全的？
 答：

（10）LinkedList是List和Deque的集合体？
 答：是

==============================================================================================
 总结
（1）使用的数据结构？
（2）添加元素、删除元素的基本逻辑？
（3）是否是fail-fast的？
（4）是否需要扩容？扩容规则？
（5）是否有序？是按插入顺序还是自然顺序还是访问顺序？
（6）是否线程安全？
（7）使用的锁？
（8）优点？缺点？
（9）适用的场景？
（10）时间复杂度？
（11）空间复杂度？


